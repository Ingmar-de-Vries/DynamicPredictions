%% ===== APPLY MINIMUM NORM ESTIMATION AND SAVE RESULTING INVERSION KERNEL =====
% This script applies minimum norm estimation (compute head model + noise
% covariance + data convariance --> MNE), and stores the resulting
% inversion kernel
clearvars;

% output directory
outdir = '\\XXX\ActionPrediction\data\MEG\InversionKernels';
addpath('\\XXX\ActionPrediction\code\preprocessing');

% get the subjs from the actual database
s = bst_get('ProtocolSubjects');

% remove group level data
s.Subject(contains(extractfield(s.Subject,'Name'),'Group')) = [];

%% ===== SUBJECTS LOOP =====
trialnum = zeros(length(s.Subject),1);
for iSubj = 1:numel(s.Subject)
    
    % Extract Structure of Subj to process
    sFiles = bst_process('CallProcess', 'process_select_files_data', [], [], ...
        'subjectname',  s.Subject(iSubj).Name, ...
        'tag',          'VideoOnset');
    
    %select trials
    sFiles = sFiles(~contains(extractfield(sFiles,'Condition'),'High'));
    sFiles = sFiles(~contains(extractfield(sFiles,'Condition'),'more'));
    
    trialnum(iSubj) = length(sFiles);
    
    % Start a new report
    bst_report('Start', sFiles);
    
    % Process: Compute head model
    sFiles = bst_process('CallProcess', 'process_headmodel', sFiles, [], ...
        'Comment',     '', ...
        'sourcespace', 1, ...  % Cortex surface
        'meg',         3, ...  % Overlapping spheres
        'eeg',         3, ...  % OpenMEEG BEM
        'ecog',        2, ...  % OpenMEEG BEM
        'seeg',        2, ...  % OpenMEEG BEM
        'openmeeg',    struct(...
        'BemFiles',     {{}}, ...
        'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
        'BemCond',      [1, 0.0125, 1], ...
        'BemSelect',    [1, 1, 1], ...
        'isAdjoint',    0, ...
        'isAdaptative', 1, ...
        'isSplit',      0, ...
        'SplitLength',  4000), ...
        'channelfile', '');
    
    % Process: Compute covariance (noise or data)
    sFiles = bst_process('CallProcess', 'process_noisecov', sFiles, [], ...
        'baseline',       [-1, -0.002], ...
        'datatimewindow', [0, 0], ...
        'sensortypes',    'MEG', ... %'MEG GRAD', ...
        'target',         1, ...  % Noise covariance     (covariance over baseline time window)
        'dcoffset',       1, ...  % Block by block, to avoid effects of slow shifts in data
        'identity',       0, ...
        'copycond',       0, ...
        'copysubj',       0, ...
        'copymatch',      0, ...
        'replacefile',    1);  % Replace
    
    % Process: Compute covariance (noise or data)
    sFiles = bst_process('CallProcess', 'process_noisecov', sFiles, [], ...
        'baseline',       [-1, -0.002], ...
        'datatimewindow', [0, 5], ...
        'sensortypes',    'MEG', ... %'MEG GRAD', ...
        'target',         2, ...  % Data covariance      (covariance over data time window)
        'dcoffset',       1, ...  % Block by block, to avoid effects of slow shifts in data
        'identity',       0, ...
        'copycond',       0, ...
        'copysubj',       0, ...
        'copymatch',      0, ...
        'replacefile',    1);  % Replace
    
    % Process: Compute sources [2018]
    sFiles = bst_process('CallProcess', 'process_inverse_2018', sFiles, [], ...
        'output',  1, ...  % Kernel only: shared
        'inverse', struct(...
        'Comment',        'MN: MEG ALL', ... 
        'InverseMethod',  'minnorm', ...
        'InverseMeasure', 'amplitude', ... 
        'SourceOrient',   {{'fixed'}}, ... 
        'Loose',          0.2, ...
        'UseDepth',       0, ... 
        'WeightExp',      0.5, ...
        'WeightLimit',    10, ...
        'NoiseMethod',    'reg', ... 
        'NoiseReg',       0.1, ...
        'SnrMethod',      'fixed', ...
        'SnrRms',         1e-06, ...
        'SnrFixed',       3, ...
        'ComputeKernel',  1, ...
        'DataTypes',      {{'MEG GRAD', 'MEG MAG'}}));
    
    % Save and display report
    ReportFile = bst_report('Save', sFiles);
    bst_report('Open', ReportFile);
    
end